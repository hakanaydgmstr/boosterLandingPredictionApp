import streamlit as st
import pandas as pd
from funcs.data_prep import *
from funcs.eda import *
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

pd.set_option("display.max_column", None)
pd.set_option("display.width", 500)


st.set_page_config(layout="wide", page_title="Veri Analizi", page_icon="icon/rocket.png")

st.title("Veri Analizi ğŸ“Š")

st.write("Bu sayfada, model iÃ§in kullanÄ±lan veri setini ve veri setindeki deÄŸiÅŸkenler iÃ§i yapÄ±lan analizleri "
         "inceleyebilirsiniz. Ek olarak aÅŸaÄŸÄ±da bazÄ± Ã¶nemli deÄŸiÅŸkenler iÃ§in Ã§eÅŸitli grafikler de bulunmaktadÄ±r.")

df = pd.read_csv("app_data.csv")
df["Block"] = df["Block"].astype("int64")
cat_cols, num_cols, cat_but_car = grab_col_names(df)

st.subheader("Veri Seti Bilgileri")
col1, col2 = st.columns(2)
col1.metric(label="GÃ¶zlem SayÄ±sÄ±", value=df.shape[0])
col1.metric(label="Kategorik DeÄŸiÅŸken SayÄ±sÄ±", value=len(cat_cols))
col2.metric(label="DeÄŸiÅŸken SayÄ±sÄ±", value=df.shape[1])
col2.metric(label="NÃ¼merik DeÄŸiÅŸken SayÄ±sÄ±", value=len(num_cols))

if st.checkbox('Veri Setini GÃ¶ster'):
    st.write(df)

st.subheader("DeÄŸiÅŸken Analizi")

col1, col2 = st.columns(2)

with col1:
    st.write("Kategorik DeÄŸiÅŸkenler")
    cat_feature = st.selectbox(
                "Bir kategorik deÄŸiÅŸken seÃ§in:",
                cat_cols
            )

    @st.cache
    def get_cat_graphs(cat_feature):
        cat_fig = px.histogram(df,
                               x=cat_feature,
                               color=cat_feature,
                               width=450, height=450,
                               pattern_shape="Class",
                               color_discrete_sequence=px.colors.sequential.RdBu)
        return cat_fig

    cat_fig = get_cat_graphs(cat_feature)
    st.plotly_chart(cat_fig)

with col2:
    st.write("NÃ¼merik DeÄŸiÅŸkenler")
    cat_feature = st.selectbox(
        "Bir nÃ¼merik deÄŸiÅŸken seÃ§in:",
        ["PayloadMass"]
    )
    num_fig = px.histogram(df,
                           x=cat_feature,
                           color="Class",
                           color_discrete_sequence={1: "royalblue",
                                                    0: "lightblue"},
                           width=450, height=450)
    st.plotly_chart(num_fig)

tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10, tab11 = st.tabs(["Orbit",
                                                                              "LaunchSite",
                                                                              "Flights",
                                                                              "GridFins",
                                                                              "Reused",
                                                                              "Legs",
                                                                              "Block",
                                                                              "ReusedCount",
                                                                              "Class",
                                                                              "UsedLandingPad",
                                                                              "PayloadMass"])

tab1.markdown("*Orbit* deÄŸiÅŸkeni, uÃ§uÅŸlarÄ±n hangi yÃ¶rÃ¼ngeye yapÄ±ldÄ±ÄŸÄ±nÄ± belirtir. YapÄ±lan uÃ§uÅŸlarÄ±n en Ã§ok GTO "
              "yÃ¶rÃ¼ngesine yapÄ±ldÄ±ÄŸÄ±nÄ± gÃ¶rÃ¼yoruz. Bu yÃ¶rÃ¼ngeye yapÄ±lan uÃ§uÅŸlarÄ±n hemen hemen yarÄ±sÄ± baÅŸarÄ±lÄ± bir "
              "ÅŸekilde iniÅŸ yapmÄ±ÅŸ. VLEO'ya yapÄ±lan uÃ§uÅŸlar ise en yÃ¼ksek baÅŸarÄ± oranÄ±na sahip.")
tab2.markdown("*LaunchSite* deÄŸiÅŸkeni, uÃ§uÅŸlarÄ±n hangi Ã¼slerden yapÄ±ldÄ±ÄŸÄ±nÄ±n bilgisini tutuyor. GrafiÄŸe gÃ¶re en "
              "fazla uÃ§uÅŸ yapÄ±lan Ã¼s CCAFS SLC 40 Ã¼ssÃ¼. Bu Ã¼sten yapÄ±lan uÃ§uÅŸlarÄ±n yarÄ±sÄ±ndan fazlasÄ± baÅŸarÄ±lÄ± bir "
              "ÅŸekilde iniÅŸ yapmÄ±ÅŸtÄ±r.")
tab3.markdown("*Flights*, kullanÄ±lacak olan roketin kaÃ§Ä±ncÄ± uÃ§uÅŸu olduÄŸunu ifade eder. GrafiÄŸe gÃ¶re en Ã§ok uÃ§uÅŸ "
              "yapan roketler ilk defa kullanÄ±lan roketlerdir.")
tab4.markdown("*GridFins*, 1. AÅŸamada kanatÃ§Ä±k kullanÄ±lÄ±p kullanÄ±lmadÄ±ÄŸÄ±nÄ± belirtir. Grafik incelendiÄŸi zaman "
              "Ã§oÄŸu uÃ§uÅŸta kanatÃ§Ä±k kullanÄ±lmÄ±ÅŸ ve yine en Ã§ok baÅŸarÄ± kanatÃ§Ä±klar kullanÄ±ldÄ±ÄŸÄ± zaman elde edilmiÅŸtir.")
tab5.markdown("*Reused*, roketin ilk defa mÄ± yoksa tekrar mÄ± kullanÄ±ldÄ±ÄŸÄ±nÄ± belirtir. GrafiÄŸe gÃ¶re ilk kez uÃ§uÅŸ "
              "yapan roketlerin sayÄ±sÄ± daha fazla. Bunun yanÄ±nda tekrar uÃ§uÅŸ yapan roketlerin baÅŸarÄ± oranÄ± daha "
              "fazladÄ±r.")
tab6.markdown("*Legs*, 1. AÅŸamada ayaklarÄ±n kullanÄ±lÄ±p kullanÄ±lmadÄ±ÄŸÄ±nÄ± belirtir. Grafikten gÃ¶rÃ¼leceÄŸi Ã¼zere "
              "yapÄ±lan uÃ§uÅŸlarÄ±n neredeyse 4te 3Ã¼nde ayaklar kullanÄ±lmÄ±ÅŸ ve en fazla baÅŸarÄ± ayaklar olduÄŸunda elde "
              "edilmiÅŸtir.")
tab7.markdown("*Block*, roketin versiyonunu temsil eder. Veri setinde 5 tane versiyon bulunmakta. Grafik "
              "incelendiÄŸinde yapÄ±lan uÃ§uÅŸlarÄ±n Ã§oÄŸu Block 5 ile yapÄ±lmÄ±ÅŸ ve yine en fazla baÅŸarÄ± bu versiyon ile "
              "elde edilmiÅŸtir.")
tab8.markdown("*ReusedCount*, roket tekrar kullanÄ±lmÄ±ÅŸsa daha Ã¶nce kaÃ§ kere kullanÄ±ldÄ±ÄŸÄ±nÄ±n bilgisini tutar. Burada "
              "ilk kez uÃ§an roketler 0 olarak girilmiÅŸtir.")
tab9.markdown("*Class*, veri setimizdeki baÄŸÄ±mlÄ± deÄŸiÅŸkenimizdir. Roketin baÅŸarÄ±lÄ± bir ÅŸekilde iniÅŸ yapÄ±p "
              "yapmadÄ±ÄŸÄ±nÄ±n bilgisini tutar.")
tab10.markdown("*UsedLandingPad*, gÃ¶revde iniÅŸ padâ€™inin kullanÄ±lÄ±p kullanÄ±lmadÄ±ÄŸÄ±nÄ± belirtir. GrafiÄŸe gÃ¶re iniÅŸ "
               "padâ€™inin olduÄŸu uÃ§uÅŸlarda baÅŸarÄ± oranÄ± Ã§ok yÃ¼ksektir.")
tab11.markdown("*PayloadMass*, veri setindeki tek nÃ¼merik deÄŸiÅŸkendir. Roketteki yÃ¼kÃ¼n aÄŸÄ±rlÄ±ÄŸÄ±nÄ± belirtir. GrafiÄŸe "
               "gÃ¶re uÃ§uÅŸlarÄ±n Ã§oÄŸunda roketler 2000-4000 kg arasÄ±nda yÃ¼k bulundurmaktadÄ±r. AyrÄ±ca 10000-12000 kg "
               "arasÄ±nda hiÃ§ yÃ¼k yoktur.")

st.markdown('#')

st.markdown("### FÄ±rlatÄ±ÅŸ SahasÄ±na GÃ¶re BaÅŸarÄ± OranlarÄ±")

col1, col2 = st.columns([2, 1])

with col1:

    pie_option = st.radio(
        "Ãœs SeÃ§iniz",
        ["Hepsi", "CCAFS SLC 40", "KSC LC 39A", "VAFB SLC 4E"],
        horizontal=True
    )

    @st.cache
    def get_pie_chart(pie_option):
        if pie_option == "Hepsi":
            fig = px.pie(df,
                         values="Class",
                         names="LaunchSite",
                         color="LaunchSite",
                         color_discrete_map={'CCAFS SLC 40': 'darkblue',
                                             'VAFB SLC 4E': 'lightblue',
                                             'KSC LC 39A': 'royalblue'},
                         width=500, height=500
                         )
            fig.update_traces(
                title_font=dict(size=25, family='Verdana',
                                color='darkred'),
                textposition='inside', textinfo='percent+label',
                hoverinfo='label+percent',
                #textinfo='percent',
                textfont_size=10)
        else:
            filtered_df = df[df["LaunchSite"] == pie_option]
            if pie_option=="CCAFS SLC 40":
                title = "Cape Canaveral Space Launch Complex 40"
            elif pie_option=="VAFB SLC 4E":
                title = "Vandenberg Air Force Base Space Launch Complex 4E"
            else:
                title = "Kennedy Space Center Launch Complex 39A"
            fig = px.pie(filtered_df,
                         values="PayloadMass",
                         names="Class",
                         color="Class",
                         color_discrete_map={0: 'royalblue',
                                             1: 'darkblue'},
                         title=title,
                         width=500, height=500
                         )
            fig.update_traces(
                title_font=dict(size=25, family='Verdana',
                                color='darkred'),
                hoverinfo='label+percent',
                textinfo='percent', textfont_size=20)
        return fig

    fig2 = get_pie_chart(pie_option)
    st.plotly_chart(fig2)

with col2:
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")
    st.markdown("#")

    if pie_option == "Hepsi":
        st.metric("Toplam UÃ§uÅŸ SayÄ±sÄ±", len(df))
        st.metric("Toplam BaÅŸarÄ±lÄ± Ä°niÅŸ SayÄ±sÄ±", len(df[df["Class"] == 1]))
    else:
        filtered_df = df[df["LaunchSite"] == pie_option]
        st.metric(f"{pie_option} ÃœssÃ¼nden YapÄ±lan UÃ§uÅŸ SayÄ±sÄ±", len(filtered_df))
        st.metric(f"{pie_option} ÃœssÃ¼ne BaÅŸarÄ±lÄ± Ä°niÅŸ SayÄ±sÄ±", len(filtered_df[filtered_df["Class"] == 1]))

col1, col2, col3 = st.columns([3, 1, 1])

with col1:
    st.markdown("### Falcon 9 VersiyonlarÄ±nÄ±n BaÅŸarÄ± OranlarÄ±")


    @st.cache
    def get_donut_chart():
        fig = px.pie(df,
                     values="Class",
                     names="Block",
                     color="Block",
                     hole=0.5,
                     width=500, height=500,
                     color_discrete_sequence=px.colors.sequential.RdBu,
                     title="Toplam BaÅŸarÄ±lÄ± Ä°niÅŸlerin Versiyonlara GÃ¶re OranlarÄ±"
                     )
        fig.update_traces(
            title_font=dict(size=25, family='Verdana',
                            color='darkred'),
            hoverinfo='label+percent',
            textinfo='percent', textfont_size=20)

        return fig


    donut_fig = get_donut_chart()
    st.plotly_chart(donut_fig)

with col2:
    st.markdown('#')
    st.markdown('#')
    st.markdown('#')

    st.metric("Block 1'in UÃ§uÅŸu ve Ä°niÅŸi", len(df[df["Block"] == 1]),
              delta=len(df[(df["Block"] == 1) & (df["Class"] == 1)]))
    st.metric("Block 2'nin UÃ§uÅŸu ve Ä°niÅŸi", len(df[df["Block"] == 2]),
              delta=len(df[(df["Block"] == 2) & (df["Class"] == 1)]))
    st.metric("Block 3'Ã¼n UÃ§uÅŸu ve Ä°niÅŸi", len(df[df["Block"] == 3]),
              delta=len(df[(df["Block"] == 3) & (df["Class"] == 1)]))
    st.metric("Block 4'Ã¼n UÃ§uÅŸu ve Ä°niÅŸi", len(df[df["Block"] == 4]),
              delta=len(df[(df["Block"] == 4) & (df["Class"] == 1)]))
    st.metric("Block 5'in UÃ§uÅŸu ve Ä°niÅŸi", len(df[df["Block"] == 5]),
              delta=len(df[(df["Block"] == 5) & (df["Class"] == 1)]))

with col3:
    st.markdown('#')
    st.markdown('#')
    st.markdown('#')

    block_1 = (len(df[(df["Block"] == 1) & (df["Class"] == 1)]) / len(df[df["Block"] == 1])) * 100
    block_2 = (len(df[(df["Block"] == 2) & (df["Class"] == 1)]) / len(df[df["Block"] == 2])) * 100
    block_3 = (len(df[(df["Block"] == 3) & (df["Class"] == 1)]) / len(df[df["Block"] == 3])) * 100
    block_4 = (len(df[(df["Block"] == 4) & (df["Class"] == 1)]) / len(df[df["Block"] == 4])) * 100
    block_5 = (len(df[(df["Block"] == 5) & (df["Class"] == 1)]) / len(df[df["Block"] == 5])) * 100

    st.metric("Block 1'in BaÅŸarÄ± OranÄ± (%)", "{:.2f}".format(block_1))
    st.metric("Block 2'nin BaÅŸarÄ± OranÄ± (%)", "{:.2f}".format(block_2))
    st.metric("Block 3'Ã¼n BaÅŸarÄ± OranÄ± (%)", "{:.2f}".format(block_3))
    st.metric("Block 4'Ã¼n BaÅŸarÄ± OranÄ± (%)", "{:.2f}".format(block_4))
    st.metric("Block 5'in BaÅŸarÄ± OranÄ± (%)", "{:.2f}".format(block_5))

st.markdown('#')
st.subheader("Ä°tici VersiyonlarÄ±nÄ±n YÃ¼k AÄŸÄ±rlÄ±k MiktarÄ±na GÃ¶re SonuÃ§larÄ±")

slide_option = st.slider(
    'YÃ¼k aralÄ±ÄŸÄ±nÄ± giriniz',
    0, int(df["PayloadMass"].max()), (0, int(df["PayloadMass"].max())), step=1000
)

def get_scatter_chart(slide_option):
    filtered_df = df.copy()
    payload_range = filtered_df[(filtered_df["PayloadMass"] >= slide_option[0]) & (
                filtered_df["PayloadMass"] <= slide_option[1])]
    fig = px.scatter(payload_range,
                     x="PayloadMass",
                     y="Class",
                     color="Block",
                     title="YÃ¼k MiktarÄ± ve BaÅŸarÄ± Korelasyonu")
    return fig

st.plotly_chart(get_scatter_chart(slide_option))

st.write("YukarÄ±daki grafik incelendiÄŸinde en Ã§ok baÅŸarÄ±lÄ± uÃ§uÅŸun Block 5 ile yapÄ±ldÄ±ÄŸÄ±, en Ã§ok baÅŸarÄ±sÄ±z olanlarÄ±n "
         "da Block 1 ile yapÄ±ldÄ±ÄŸÄ± gÃ¶zlemlenmektedir. 10.000 kg ve Ã¼stÃ¼ yÃ¼klerde sadece Block 5 ile baÅŸarÄ± saÄŸlanmÄ±ÅŸ, "
         "15.000 kg Ã¼zerinde yapÄ±lan 4 uÃ§uÅŸtan 2â€™si baÅŸarÄ±lÄ± bir ÅŸekilde iniÅŸ yapmÄ±ÅŸtÄ±r. 5.000-10.000 kg arasÄ±ndaki "
         "yÃ¼klerde de yine aynÄ± ÅŸekilde en iyi sonuÃ§ Block 5 ile alÄ±nmÄ±ÅŸtÄ±r.")

st.markdown('#')

st.subheader("YÄ±llara GÃ¶re Ortalama BaÅŸarÄ± GrafiÄŸi")

line_chart_df = df.groupby(pd.DatetimeIndex(df["Date"]).year).agg({"Class": "mean"}).reset_index()
year_fig = px.line(line_chart_df, x="Date", y="Class")
st.plotly_chart(year_fig)

year_info_df = df.groupby(pd.DatetimeIndex(df["Date"]).year).agg({"Class": "count"})
year_info_df.columns = ["Toplam YapÄ±lan UÃ§uÅŸlar"]
st.table(year_info_df.T)